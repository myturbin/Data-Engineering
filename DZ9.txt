Практическое задание по теме “Транзакции, переменные, представления”


1. В базе данных shop и sample присутствуют одни и те же таблицы, учебной базы данных. 
Переместите запись id = 1 из таблицы shop.users в таблицу sample.users. Используйте транзакции.

-----------------------------------------------------------------

START TRANSACTION;

INSERT INTO sample.users (SELECT id, name, 
birthday_at
FROM shop.users
WHERE id = 1);
 
 DELETE FROM shop.users WHERE id = 1;

COMMIT;

-----------------------------------------------------------------

2. Создайте представление, которое выводит название name товарной позиции из таблицы products и 
соответствующее название каталога name из таблицы catalogs.

-----------------------------------------------------------------
CREATE 
    ALGORITHM = UNDEFINED 
    DEFINER = `root`@`localhost` 
    SQL SECURITY DEFINER
VIEW `products_catalogs_view` AS
    SELECT 
        `p`.`name` AS `product_name`, `c`.`name` AS `catalog_name`
    FROM
        (`products` `p`
        LEFT JOIN `catalogs` `c` ON ((`c`.`id` = `p`.`catalog_id`)))

-----------------------------------------------------------------

3. (по желанию) Пусть имеется таблица с календарным полем created_at. 
В ней размещены разряженые календарные записи за август 2018 года '2018-08-01', '2016-08-04', '2018-08-16' и 2018-08-17. 
Составьте запрос, который выводит полный список дат за август, выставляя в соседнем поле значение 1, если дата присутствует в исходном таблице и 0, если она отсутствует.

-----------------------------------------------------------------

-----------------------------------------------------------------

4. (по желанию) Пусть имеется любая таблица с календарным полем created_at. 
Создайте запрос, который удаляет устаревшие записи из таблицы, оставляя только 5 самых свежих записей.

-----------------------------------------------------------------

-----------------------------------------------------------------

Практическое задание по теме “Хранимые процедуры и функции, триггеры"


1. Создайте хранимую функцию hello(), которая будет возвращать приветствие, в зависимости от текущего времени суток. 
С 6:00 до 12:00 функция должна возвращать фразу "Доброе утро", с 12:00 до 18:00 функция должна возвращать фразу "Добрый день", с 18:00 до 00:00 — "Добрый вечер", с 00:00 до 6:00 — "Доброй ночи".

-----------------------------------------------------------------
CREATE DEFINER=`root`@`localhost` FUNCTION `hello`() RETURNS text CHARSET utf8mb4
    DETERMINISTIC
BEGIN
IF EXTRACT(HOUR FROM now())  between 6 and 10 
then RETURN 'доброе утро!';
ELSEIF  EXTRACT(HOUR FROM now()) between 10 and 18
then RETURN 'добрый день!';
ELSEIF  EXTRACT(HOUR FROM now()) between 18 and 23
then RETURN 'добрый вечер!';
ELSEIF  EXTRACT(HOUR FROM now()) between 0 and 6
then RETURN 'доброй ночи!';

END IF;
END

-----------------------------------------------------------------

2. В таблице products есть два текстовых поля: name с названием товара и description с его описанием. 
Допустимо присутствие обоих полей или одно из них. 
Ситуация, когда оба поля принимают неопределенное значение NULL неприемлема. 
Используя триггеры, добейтесь того, чтобы одно из этих полей или оба поля были заполнены. 
При попытке присвоить полям NULL-значение необходимо отменить операцию.

-----------------------------------------------------------------
CREATE DEFINER=`root`@`localhost` TRIGGER `products_BEFORE_INSERT` BEFORE INSERT ON `products` FOR EACH ROW BEGIN
if isnull(`name`) + isnull(`desription`) = 2 then
SIGNAL SQLSTATE '45000'
SET MESSAGE_TEXT = 'name and description are NULL';
END IF;
END
-----------------------------------------------------------------

3. (по желанию) Напишите хранимую функцию для вычисления произвольного числа Фибоначчи. 
Числами Фибоначчи называется последовательность в которой число равно сумме двух предыдущих чисел. 
Вызов функции FIBONACCI(10) должен возвращать число 55.

-----------------------------------------------------------------

-----------------------------------------------------------------

