Практическое задание по теме «Операторы, фильтрация, сортировка и ограничение»


1.Пусть в таблице users поля created_at и updated_at оказались незаполненными. Заполните их текущими датой и временем.

-----------------------------------------------------------------

UPDATE `users` 
SET 
    `created_at` = NOW(),
    `updated_at` = NOW();

-----------------------------------------------------------------

2.Таблица users была неудачно спроектирована. Записи created_at и updated_at были заданы типом VARCHAR и в них долгое время помещались значения в формате 20.10.2017 8:10. Необходимо преобразовать поля к типу DATETIME, сохранив введённые ранее значения.

-----------------------------------------------------------------

UPDATE `shop`.`users_varchar` set
created_at = STR_TO_DATE(created_at,'%d.%m.%Y %h:%i'),
updated_at = STR_TO_DATE(updated_at,'%d.%m.%Y %h:%i');

ALTER TABLE `shop`.`users_varchar` 
CHANGE COLUMN `created_at` `created_at` DATETIME NULL DEFAULT NULL ,
CHANGE COLUMN `updated_at` `updated_at` DATETIME NULL DEFAULT NULL ;

-----------------------------------------------------------------

3. В таблице складских запасов storehouses_products в поле value могут встречаться самые разные цифры: 0, если товар закончился и выше нуля, если на складе имеются запасы. Необходимо отсортировать записи таким образом, чтобы они выводились в порядке увеличения значения value. Однако нулевые запасы должны выводиться в конце, после всех записей. 

-----------------------------------------------------------------

SELECT *,
 `value` = 0
FROM shop.storehouses_products
ORDER BY `value`= 0, `value`;

id storehouse_id product_id value created_at updated_at updated_at            `value` = 0

6	16	6	100	2021-02-04 16:07:56	2021-02-04 21:58:06	0
5	15	5	1000	2021-02-04 16:07:56	2021-02-04 21:58:06	0
3	13	3	10000	2021-02-04 16:07:56	2021-02-04 21:38:39	0
4	14	4	100000	2021-02-04 16:07:56	2021-02-04 21:39:50	0
1	11	1	0	2021-02-04 16:07:56	2021-02-04 21:58:06	1
2	12	2	0	2021-02-04 16:07:56	2021-02-04 21:58:06	1
-----------------------------------------------------------------

4. (по желанию) Из таблицы users необходимо извлечь пользователей, родившихся в августе и мае. Месяцы заданы в виде списка английских названий (may, august)

-----------------------------------------------------------------
SELECT 
    MONTHNAME(birthday_at) AS birthday_month, `name`, id
FROM
    `shop`.`users`
WHERE
    MONTHNAME(birthday_at) = 'October'
        OR MONTHNAME(birthday_at) = 'May'
ORDER BY MONTH(birthday_at);

-----------------------------------------------------------------


5. (по желанию) Из таблицы catalogs извлекаются записи при помощи запроса. SELECT * FROM catalogs WHERE id IN (5, 1, 2); Отсортируйте записи в порядке, заданном в списке IN.

-----------------------------------------------------------------
a) SELECT * FROM catalogs WHERE id IN (5, 1, 2)
order by 
case id
when 5 then 1
when 1 then 2
when 2 then 3
end;

Более универсальное решение я не осилил.;-) Буду рад, если подскажите!

-----------------------------------------------------------------


Практическое задание теме «Агрегация данных»


1. Подсчитайте средний возраст пользователей в таблице users.

-----------------------------------------------------------------
SELECT 
    AVG(TIMESTAMPDIFF(YEAR,
        `birthday_at`,
        NOW())) AS Average_age
FROM
    shop.users;

Average_age
30.6667
-----------------------------------------------------------------

2. Подсчитайте количество дней рождения, которые приходятся на каждый из дней недели. Следует учесть, что необходимы дни недели текущего года, а не года рождения.

-----------------------------------------------------------------
SELECT 
    DAYNAME(CONCAT(YEAR(NOW()), RIGHT(birthday_at, 6))) AS birthday,
    COUNT(*) AS quantity
FROM
    shop.users
GROUP BY birthday;

	birthday	quantity
	Tuesday		2
	Friday		1
	Thursday	1
	Sunday		2
-----------------------------------------------------------------

3. (по желанию) Подсчитайте произведение чисел в столбце таблицы.

-----------------------------------------------------------------
SELECT 
    ROUND(EXP(SUM(LOG(id))), 1) AS id_multiplication
FROM
    shop.users;
-----------------------------------------------------------------
